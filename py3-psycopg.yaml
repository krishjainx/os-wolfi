package:
  name: py3-psycopg
  version: 3.1.18
  epoch: 1
  description: PostgreSQL database adapter for Python
  copyright:
    - license: LGPL-3.0-only
  dependencies:
    runtime:
      - libpq-16
      - py3-typing-extensions
      - py3-tzdata
      - python3

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - poetry
      - py3-gpep517
      - py3-setuptools
      - py3-wheel
      - python3
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/psycopg/psycopg
      tag: ${{package.version}}
      expected-commit: 8585a23fcd7bcf75193adbc10d3005752ba8f15f

  - name: Python Build
    runs: |
      cd psycopg
      export SETUPTOOLS_SCM_PRETEND_VERSION=${{package.version}}
       python3 -m gpep517 build-wheel \
       --wheel-dir dist \
       --output-fd 3 3>&1 >&2

       python3 -m installer -d "${{targets.destdir}}" \
       dist/*.whl

  - uses: strip

update:
  enabled: true
  ignore-regex-patterns:
    - pool-*
    - 3.0.dev*
  github:
    identifier: psycopg/psycopg
    use-tag: true

test:
  environment:
    contents:
      packages:
        - postgresql
        - postgresql-client
        - wolfi-base
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: wolfi
  pipeline:
    - name: "Test database creation"
      runs: |
        useradd $PGUSER
        sudo -u $PGUSER initdb -D /tmp/test_db
        sudo -u $PGUSER pg_ctl -D /tmp/test_db -l /tmp/logfile start
        sudo -u $PGUSER createdb testdb
        psql -lqt | cut -d \| -f 1 | grep -qw testdb
    - name: "Test psycopg"
    - runs: |
        cat <<'EOF' >> /tmp/test.py
        import psycopg

        def main():
            conn = psycopg.connect(dbname="testdb", user="wolfi")
            cursor = conn.cursor()

            try:
                # Create Table
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS example_table (
                        id SERIAL PRIMARY KEY,
                        message TEXT
                    )
                """)

                # Insert value
                cursor.execute("INSERT INTO example_table (message) VALUES (%s)", ("Hello Wolfy!",))
                conn.commit()

                # Select and print
                cursor.execute("SELECT message FROM example_table")
                result = cursor.fetchone()
                message = result[0].decode("utf-8")
                print("Message retrieved from database:", message)

            except Exception as e:
                print("Error:", e)

            finally:
                cursor.close()
                conn.close()

        if __name__ == "__main__":
            main()
        EOF
        python3 /tmp/test.py
